{{define "utilsCode"}}

var InvalidType = errors.New("Invalid type")

func appendQuery(q string, l int) (string, error){
    if l <= 1 {
		return q, nil
	}
	regex := regexp.MustCompile(`\(.*\)`)
	res := regex.FindAllString(q, 2)[1]
	var join []string
	for i := 1; i < l; i++ {
		join = append(join, res)
	}
	return q + "," + strings.Join(join, ","), nil
}

func batchDelete(q string, d any) (string, error) {
	pType := reflect.TypeOf(d).Kind()
	if pType != reflect.Slice && pType != reflect.Array && pType != reflect.Ptr {
		return "", InvalidType
	}

	groupQuery := regexp.MustCompile(`(\w+\s*(?:in|=)\s*[\(]?\?*[\)]?),*`).FindAllStringSubmatch(q, -1)
	sqlGroup := regexp.MustCompile(`\(.*\)`)
	if pType == reflect.Array || pType == reflect.Slice {
		group := createGroupSql(reflect.ValueOf(d).Len())
		newSql := sqlGroup.ReplaceAllString(groupQuery[0][1], group)
		q = strings.ReplaceAll(q, groupQuery[0][1], newSql)
	} else {
		elem := reflect.ValueOf(d).Elem()
		for i := 0; i < elem.NumField(); i++ {
			f := elem.Field(i)
			if f.Kind() == reflect.Array || f.Kind() == reflect.Slice {
				group := createGroupSql(f.Len())
				newSql := sqlGroup.ReplaceAllString(groupQuery[i][1], group)
				q = strings.ReplaceAll(q, groupQuery[i][1], newSql)
			}
		}
	}
	return q, nil
}

func createGroupSql(l int) string {
	return "(" + strings.Join(strings.Split(strings.Repeat("?", l), ""), ",") + ")"
}

func batchUpdateQuery(query, colName string, numParam, numEfectedField int) string{
	whenThen := "WHEN ? THEN ? "
	o := fmt.Sprintf("(CASE %s %s END)", colName, strings.Repeat(whenThen, numParam))

	ids := fmt.Sprintf("in (%s)", strings.Join(strings.Split(strings.Repeat("?", numParam), ""), ","))
	jn := strings.Replace(query, "?", o, numEfectedField)
	return regexp.MustCompile(`=\s+\?`).ReplaceAllString(jn, ids)
}

func composeParams(s any) ([]any, error) {
	v := reflect.ValueOf(s)
	if (v.Kind() == reflect.Array || v.Kind() == reflect.Slice) && v.Len() > 0 {
		var r []any
		if t := v.Index(0).Kind(); t == reflect.Struct || t == reflect.Ptr {
			for h := 0; h < v.Len(); h++ {
				var el reflect.Value
				if t == reflect.Struct {
					el = v.Index(h).Addr().Elem()
				} else {
					el = v.Index(h).Elem()
				}
				for i := 0; i < el.NumField(); i++ {
					r = append(r, el.Field(i).Interface())
				}
			}
			return r, nil
		} else {
			r := make([]any, v.Len())
			for i := 0; i < v.Len(); i++ {
				r[i] = v.Index(i).Interface()
			}
			return r, nil
		}
	}

	return nil, InvalidType
}

{{end}}
